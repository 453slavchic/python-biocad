Работа в командной строке Linux
#################################

:date: 2018-09-08 09:00
:summary: Работа в командной строке Linux.
:status: not ready


.. default-role:: code

Работа в командной строке Linux
========

Kомандный интерпретатор (или командная оболочка) – это программа, принимающая и выполняющая программы. Командный интерпретатор также поддерживает конструкции программирования, позволяя составлять сложные команды из более простых.
Мы рассмотрим командный интерпретатор bash – это один из интерпретаторов, доступных в Linux.

Команды в ОС Linux состоят из имени, опций и параметров. Некоторые команды не имеют ни опций, ни параметров, некоторые имеют и то, и другое, а некоторые – только опции или только параметры. 

.. code-block:: bash

	[user@comp ~]$ command_name [options] [params]
	
Рассмотрим этот синтаксис на примере некоторых распространенных команд.
	
ls
----

Возвращает содержимое одной или нескольких папок. Без параметров команда команда возвращает содержимое текущей папки. Откройте терминал и попробуйте

.. code-block:: bash

	[user@comp ~]$ ls
	
В качестве параметров подаются пути к папкам, содержимое которых можно напечатать. В bash то, что следует после символа '#', является комментарием и не выполняется.

.. code-block:: bash

	[user@comp ~]$ ls /  # содержимое корневого каталога (/ - корневой каталог в linux)
	[user@comp ~]$ ls / /home  # аргументы и опции разделяются одним или более пробелами (/home директория с личными папками пользователей)
	[user@comp ~]$ ls <some_dir_in_current_directory>  # в качестве параметров можно передаввать, как абсолютные (начинаются с / или ~) пути, так и относительные (пути из текущей директории)
	[user@comp ~]$ ls ~  # ~ - краткое название домашней папки текущего пользователя (/home/my_name)
	
Опции можно указывать до, после и между параметрами, но принято их писать до параметров. Порядок опций не важен в bash. У опции может быть короткая или длинная запись, или обе. Короткая запись состоит из дефиса и одной буквы латинского алфавита. Например

.. code-block:: bash

	[user@comp ~]$ ls -l  # вместе с названиями файлов и папок печатаются их метаданные
	[user@comp ~]$ ls -a  # печатаются все файлы, включая скрытые (в linux файлы с именами, начинающимися с '.', являются скрытыми)
	[user@comp ~]$ ls -l -a  # опции разделяются пробелами (порядок опций не важен)
	[user@comp ~]$ ls -al  # короткие опции можно объединять
	
Длинная запись опции начинается с двух дефисов. Например


.. code-block:: bash

	[user@comp ~]$ ls --all  # то же самое, что и -a
	
man
----

``man [command_name]`` покажет документацию по команде ``command_name``. Пример:

.. code-block:: bash

	[user@comp ~]$ man ls
	
touch
------
  
Меняет время последнего изменения файлов и папок. Если файл не существует, то создается пустой файл с соответствующим именем. Если время не указано, устанавливается текущее время.

.. code-block:: bash

	[user@comp ~]$ touch new_file  # создается пустой файл (если его не было раньше)
	[user@comp ~]$ touch "name with spaces"  # если в пути к файлу или папке есть пробелы, то путь следует заключать в кавычки"
	
Опции могут использоваться для передачи опциональных аргументов. Например, команде ``touch`` можно передать дату последнего изменения, которую требуется установить. Можно встретиться с разными вариантами синтаксиса. 


.. code-block:: bash

	[user@comp ~]$ touch --date="jan 1 2000" new_file  
	[user@comp ~]$ ls -l
	[user@comp ~]$ touch --date "jan 1 1000" new_file 
	[user@comp ~]$ ls -l
	[user@comp ~]$ touch -d "jan 1 500" new_file
	[user@comp ~]$ ls -l
	
mkdir
-----

Используется для создания директорий.

.. code-block:: bash

	[user@comp ~]$ mkdir new_dir
	
rm
----

Предназначена для удаления файлов и каталогов.

.. code-block:: bash

	[user@comp ~]$ rm new_file "name with spaces"
	[user@comp ~]$ rm -R new_dir  # при удалении каталога следует указать ключ -R (recursive)
	
cd
----

Переход между директориями. ``cd [path]``

Попробуйте


.. code-block:: bash

	[user@comp ~]$ mkdir -p dir1/dir2/dir3  # ключ -p (--parents) позволяет создавать каталоги рекурсивно
	[user@comp ~]$ cd dir1
	[user@comp ~]$ cd dir2/dir3  # так переходим по относительному пути
	[user@comp ~]$ cd ~/dir1/dir2  
	[user@comp ~]$ cd /  # последние 2 раза по абсолютному пути
	[user@comp ~]$ cd  # без аргументов команда вернет нас в домашний каталог
	[user@comp ~]$ mkdir dir4  # создадим еще одну папку
	[user@comp ~]$ cd dir4
	[user@comp ~]$ cd ../dir1/dir2  # в bash ".." - папка на один уровень выше, а "." - текущая папка
	[user@comp ~]$ cd;rm -R dir1 dir4  # можно записать несколько команд в одной строке, разделяя их ";". Они будут выполнены последовательно
	

